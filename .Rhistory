install.packages("KernSmooth")
library(KernSmooth)
x <- 1:10
if(x > 5) { x<- 0 }
f <- function(x) { g <- function(y) {y + z} z <- 4 x+g(x)}
f <- function(x) {}
f <- function(x) {}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
setwd("~/Documents/Sharpen the Saw/Mental/Coursera/R Programming/Week 3 Quiz")
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length, na.rm = TRUE)
summary(iris)
?sapply
?tapply
mean(iris[Species = "virginica"]$Sepal.Length, na.rm = TRUE)
iris[Species == "verginica"]
iris[iris$Species == "verginica"]
iris[iris$Species = "verginica"]
iris[ , Species == "virginica"]
iris[ , iris$Species == "virginica"]
iris[iris$Species == "virginica"]
iris[ , iris$Species = "virginica"]
iris[ , iris$Species == "virginica"]
iris[ iris$Species == "virginica"]
iris$Species = "virginica"
data(iris)
iris$Species
iris$Species == virginica
iris$Species == "virginica"
iris[iris$Species == "virginica"]
iris[iris$Species == "virginica", ]
iris[iris$Species == "virginica", ]$Sepal.Length
mean(iris[iris$Species == "virginica", ]$Sepal.Length)
colMeans(iris)
?apply
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
?colMeans
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
?tapply
mean(mtcars[mtcars$cyl == 4, ]$hp) - mean(mtcars[mtcars$cyl == 8, ]$hp)
with(mtcars, tapply(hp, cyl, mean))
setwd("~/Documents/Sharpen the Saw/Mental/Coursera/R Programming/ProgrammingAssignment2")
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  ## sets the inital inverse to NULL
# $set - stores the matrix passed to this function in the object
set <- function(y) {
## should probably do some error checking to prevent non-matrix objects from being stored
x <<- y
inv <<- NULL
}
# $get - returns the stored matrix
get <- function() x
# $setInverse - takes a matrix and stores it as the "inverse"
setInverse <- function(inverse) inv <<- inverse
# $getInverse - returnes the stored inverse
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
?matrix
y <- matrix(c(4, 2, 7, 6), nrow = 2, ncol = 2)
is.matrix(y)
x <- makeCacheMatrix(y)
x
Y$get
y$get
cacheSolve(y)
cacheSolve <- function(x, ...) {
## should probably check that x is a makeCacheMatrix object
## get the inverse, if any
inv <- x$getInverse()
## if there in an inverse, return cached result with message
if(!is.null(inv)) {
message("getting cached data")
return(m)
}
## only here in inv is NULL, so calculate inverse
data <- x$get()     # get the matrix
inv <- solve(data)  # find inverse
x$setInverse(inv)   # store inverse in object
## Return a matrix that is the inverse of 'x'
inv
}
cacheSolve(y)
y
cacheSolve(x)
cacheSolve(x)
cacheSolve <- function(x, ...) {
## should probably check that x is a makeCacheMatrix object
## get the inverse, if any
inv <- x$getInverse()
## if there in an inverse, return cached result with message
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## only here in inv is NULL, so calculate inverse
data <- x$get()     # get the matrix
inv <- solve(data)  # find inverse
x$setInverse(inv)   # store inverse in object
## Return a matrix that is the inverse of 'x'
inv
}
cacheSolve(x)
cacheSolve(x)
"getInverse" %in% x
"getInverse" %in% names(x)
"getInverse" %in% names(x) & "get" %in% names(x) & "setInverse" %in% names(x)
z <- NULL
q <- makeCacheMatrix(z)
cacheSolve(q)
is.matrix(z)
q <- makeCacheMatrix()
q$get
q$set(z)
q$get
q$get()
is.matrix(z)
q$set
## These functions provide a way to calculate the
## inverse of a matrix and cache the results for
## quicker access.
## makeCacheMatrix is an "object" (actually a list)
## that has the following four methods:
## $set(y)        Sets the value of the stored matrix to the matrix passed as a parameter
## $get           Gets the value of the stored matrix
## $setInverse(inverse)   Sets the value of the inverse of the matrix
## $getInverse            Gets the value of the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  ## sets the inital inverse to NULL
# $set - stores the matrix passed to this function in the object
set <- function(y) {
## checks that y is a matrix and if so, sets x = y
if (is.matrix(y)) {
x <<- y
} else {
stop("'y' must be a matrix")
}
inv <<- NULL
}
# $get - returns the stored matrix
get <- function() x
# $setInverse - takes a matrix and stores it as the "inverse"
setInverse <- function(inverse) inv <<- inverse
# $getInverse - returnes the stored inverse
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## cacheSolve takes a makeCacheMatrix object and
## calculates its inverse, storing the result in
## the makeCacheMatrix
## Assumes that the matrix is invertible
cacheSolve <- function(x, ...) {
## check that x has all required makeCacheMatrix functions first
if ("getInverse" %in% names(x) & "get" %in% names(x) & "setInverse" %in% names(x)) {
## all required methods are available, so proceed
## get the inverse, if any
inv <- x$getInverse()
## if there in an inverse, return cached result with message
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## only here in inv is NULL, so calculate inverse
data <- x$get()     # get the matrix
inv <- solve(data)  # find inverse
x$setInverse(inv)   # store inverse in object
## Return a matrix that is the inverse of 'x'
return(inv)
} else {
## error out as makeCacheMatrix was not provided
stop("'x' requires a makeCacheMatrix object")
}
}
q <- makeCacheMatrix
q <- makeCacheMatrix()
q$get()
q$set(z)
z Â¥ <- 1
z <- 1
q$set(z)
solve(q$get())
cacheSolve(z)
q$set(y)
cacheSolve(q)
cacheSolve(q)
